@using System.ComponentModel
@using TG.Blazor.IndexedDB
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.JSInterop
@inject IndexedDBManager DbManager
<div>
    <p><b>status:</b> @Message</p>
</div>
<div class="d-flex flex-row align-items-start">
    <div class="d-flex flex-column">
        <button class="btn btn-outline-primary m-4" onclick="@OpenDatabase">Open Database</button>
        <button class="btn btn-outline-primary m-4" onclick="@GetRecords">Get Records</button>
    </div>

    <div class="d-flex, flex-column">
        <div class="m-4 border d-flex flex-column">
            <div class="m-4">
                <label>First Name</label> <input id="firstName" type="text" bind="@CurrentPerson.FirstName" />
            </div>
            <div class="m-4">
                <label>Last Name</label> <input id="lastName" type="text" bind="@CurrentPerson.LastName" />
            </div>
            <button class="btn btn-primary m-4" onclick="@TestAddRecord">Add/Update Record</button>
        </div>
    </div>

    <div class="d-flex flex-row flex-wrap">

        @foreach (var person in People)
        {

            <div class="card" style="margin:5px; padding:5px; width:200px">
                @* <p>Id: @person.Id</p>*@
                <p>FirstName: @person.FirstName</p>
                <p>LastName: @person.LastName</p>
                <div>
                    <button class="btn btn-outline-primary" onclick="@(() => EditPerson(person.Id.Value))">Edit</button>
                    <button class="btn btn-outline-warning" onclick="@(() => DeleteRecord(person.Id.Value))">Delete</button>
                </div>
            </div>

        }

    </div>


</div>

@functions
{
    string Message { get; set; }

    Person CurrentPerson { get; set; } = new Person();

    List<Person> People { get; set; } = new List<Person>();



    protected async void OpenDatabase()
    {
        Message = await DbManager.OpenDb();
        StateHasChanged();
    }

    protected async void GetRecords()
    {
        var results = await DbManager.GetRecords<Person>(DbManager.Stores[0].Name);
        if (results.Any())
        {
            People = results;
        }
        else
        {
            People.Clear();
            Message = "No Records found";
        }

        StateHasChanged();
    }

    protected async Task EditPerson(long id)
    {
        try
        {
            CurrentPerson = await DbManager.GetRecordById<long,Person>(DbManager.Stores[0].Name, id);
        }
        catch (Exception)
        {

            throw;
        }
    }

    protected async void TestAddRecord()
    {
        var newRecord = new StoreRecord<Person>
        {
            Storename = DbManager.Stores[0].Name,
            Data = CurrentPerson
        };

        string result;

        if (newRecord.Data.Id.HasValue)
        {
            result = await DbManager.UpdateRecord(newRecord);
        }
        else
        {
            result = await DbManager.AddRecord(newRecord);
        }


        Message = result;
        CurrentPerson = new Person();

        GetRecords();

        StateHasChanged();
    }

    protected async Task DeleteRecord(long? id)
    {
        Message = await DbManager.DeleteRecord(DbManager.Stores[0].Name, id);

        GetRecords();
    }

    public class Person
    {
        public long? Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }

    }

}
