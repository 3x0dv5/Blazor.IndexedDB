@using System.ComponentModel
@using Blazor.IndexedDB
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.JSInterop
@inject IndexedDBManager DbManager
<div>
    <p><b>status:</b> @Message</p>
</div>
<div class="d-flex flex-column align-items-start">
    <button class="btn btn-outline-primary m-4" onclick="@OpenDatabase">Open Database</button>
    <div class="d-flex, flex-row">
        <div class="m-4 border d-flex flex-column">
            <div class="m-4">
                <label>First Name</label> <input id="firstName" type="text" bind="@FirstName" />
            </div>
            <div class="m-4">
                <label>Last Name</label> <input id="lastName" type="text" bind="@LastName" />
            </div>
            <button class="btn btn-primary m-4" onclick="@TestAddRecord">Add Record</button>
        </div>
        <div class="m-4">
            <ul>
                @foreach (var person in People)
                {
                    <li>
                        <div class="card">
                            <p>FirstName: @person.FirstName</p>
                            <p>LastName: @person.LastName</p>
                        </div>
                    </li>
                }
            </ul>
        </div>
       
    </div>




</div>

@functions
{
    string Message { get; set; }

    string FirstName { get; set; }
    string LastName { get; set; }

    List<Person> People { get; set; } = new List<Person>();



    protected async void OpenDatabase()
    {
        Message = await DbManager.OpenDb();
        StateHasChanged();
    }

    protected async void TestAddRecord()
    {
        var person = new Person { FirstName = FirstName, LastName = LastName };
        var newRecord = new SingleRecord<Person>
        {
            Storename = DbManager.Stores[0].Name,
            Data = person
        };
        var result = await DbManager.AddRecord(newRecord);
        Message = result;
        LastName = "";
        FirstName = "";

        var json = await DbManager.GetRecords<string>(DbManager.Stores[0].Name);
        if (!string.IsNullOrEmpty(json))
        {
            Console.WriteLine(json as string);
            People = Json.Deserialize<List<Person>>(json);
        }
        else
        {
            Message = "No Records found";
        }

        StateHasChanged();
    }

    public class Person
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }


}
