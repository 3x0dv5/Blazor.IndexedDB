!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1);var r;!function(e){const t="TimeGhost",n={IndexedDbManager:new o.IndexedDbManager};e.initialise=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(r||(r={})),r.initialise()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IndexedDbManager=class{constructor(){this.assemblyName="Blazor.IndexedDB",this.promiseCallback="PromiseCallback",this.promiseError="PromiseError",this.isOpen=!1,this.runFunction=((e,t,n)=>(console.log("Start runFunction"),this[t](n).then(t=>{void 0===t&&(t="");const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseCallback,e,n)}).catch(t=>{const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseError,e,n)}),!0)),this.openDb=(e=>new Promise((t,n)=>{const o=window.indexedDB.open(e);o.onsuccess=(n=>{this.db=o.result,this.isOpen=!0,t(`Database ${e} opened`)}),o.onerror=(t=>{n(`Failed to create database ${e}`)})})),this.createDb=(e=>{const t=e;return console.log("createDb"),new Promise((e,n)=>{const o=window.indexedDB.open(t.name,t.version);o.onsuccess=(n=>{this.db=o.result,this.isOpen=!0,e(`Database ${t.name} created. Version: ${t.version}`)}),o.onerror=(e=>{n(`Failed to create database ${t.name}`)}),o.onupgradeneeded=(e=>{const n=o.result;if(t.tables)for(let e=0;e<t.tables.length;e++){const o=t.tables[e],r=o.primaryKey,s=n.createObjectStore(o.name,{keyPath:r.name,autoIncrement:r.auto});for(let e=0;e<o.indexes.length;e++){const t=o.indexes[e];s.createIndex(t.name,t.keyPath,{unique:t.unique})}}})})}),this.addRecord=(e=>{const t=e.storename,n=e.data,o=this.getObjectStore(t,"readwrite");return new Promise((e,t)=>{const r=o.add(n);r.onsuccess=(t=>{console.log("Insertion successful"),console.log("result",r.result),console.log("source",r.source),e({item1:!0,item2:"Record Added",item3:r.result})}),r.onerror=(e=>{t([!1,"Failed to added record",-1])})})}),this.getObjectStore=((e,t)=>this.db.transaction(e,t).objectStore(e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,