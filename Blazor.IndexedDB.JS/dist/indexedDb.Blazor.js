!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,o){var r,i=new Promise(function(i,c){t(r=e[n].apply(e,o)).then(i,c)});return i.request=r,i}function o(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,t,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return n(this[t],r,arguments)})})}function i(e,t,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return this[t][o].apply(this[t],arguments)})})}function c(e,t,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return function(e,t,o){var r=n(e,t,o);return r.then(function(e){if(e)return new u(e,r.request)})}(this[t],r,arguments)})})}function s(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function a(e){this._store=e}function d(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new d(n)}function f(e){this._db=e}o(s,"_index",["name","keyPath","multiEntry","unique"]),r(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),c(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(u,"_cursor",["direction","key","primaryKey","value"]),r(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(u.prototype[e]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,o),t(n._request).then(function(e){if(e)return new u(e,n._request)})})})}),a.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},a.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},o(a,"_store",["name","keyPath","indexNames","autoIncrement"]),r(a,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),c(a,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(a,"_store",IDBObjectStore,["deleteIndex"]),d.prototype.objectStore=function(){return new a(this._tx.objectStore.apply(this._tx,arguments))},o(d,"_tx",["objectStoreNames","mode"]),i(d,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new a(this._db.createObjectStore.apply(this._db,arguments))},o(l,"_db",["name","version","objectStoreNames"]),i(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new d(this._db.transaction.apply(this._db,arguments))},o(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[a,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t=function(e){return Array.prototype.slice.call(e)}(arguments),n=t[t.length-1],o=this._store||this._index,r=o[e].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}})})}),[s,a].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,o=[];return new Promise(function(r){n.iterateCursor(e,function(e){e?(o.push(e.value),void 0===t||o.length!=t?e.continue():r(o)):r(o)})})})});var p={open:function(e,t,o){var r=n(indexedDB,"open",[e,t]),i=r.request;return i&&(i.onupgradeneeded=function(e){o&&o(new l(i.result,e.oldVersion,i.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=p,e.exports.default=e.exports}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(2);var r;n(0),function(e){const t="TimeGhost",n={IndexedDbManager:new o.IndexedDbManager};e.initialise=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(r||(r={})),r.initialise()},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function c(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(c,s)}u((o=o.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.IndexedDbManager=class{constructor(){this.isOpen=!1,this.dbPromise=new Promise((e,t)=>{}),this.openDb=(e=>{var t=e;return new Promise((e,n)=>{this.dbPromise=r.default.open(t.dbName,t.version,e=>{this.upgradeDatabase(e,t)}),e("database created")})}),this.addRecord=(e=>o(this,void 0,void 0,function*(){const t=e.storename,n=e.data,o=(yield this.dbPromise).transaction(t,"readwrite");let r;try{r=`Added new record with id ${yield o.objectStore(t).add(n)}`}catch(e){console.log("Error adding recording:",e.message),r="Failed to add new record"}return r})),this.updateRecord=(e=>o(this,void 0,void 0,function*(){const t=e.storename,n=e.data,o=(yield this.dbPromise).transaction(t,"readwrite");let r;try{r=`updated record with id ${yield o.objectStore(t).put(n)}`}catch(e){console.log("Error adding recording:",e.message),r="Failed to update record"}return r})),this.getRecords=(e=>o(this,void 0,void 0,function*(){const t=yield this.dbPromise;let n;try{let o=yield t.transaction(e).objectStore(e).getAll();n=JSON.stringify(o)}catch(e){console.error("Issue getting all records",e),n="failed to get records"}return n})),this.getRecordById=(e=>o(this,void 0,void 0,function*(){const t=e.storename,n=e.data,o=yield this.dbPromise;let r;try{let e=yield o.transaction(t,"readonly").objectStore(t).get(n);r=JSON.stringify(e)}catch(e){console.error(`failed to get record: ${n}`,e),r=`failed to get record: ${n}`}return r})),this.deleteRecord=(e=>o(this,void 0,void 0,function*(){const t=e.storename,n=e.data,o=(yield this.dbPromise).transaction(t,"readwrite");try{return yield o.objectStore(t).delete(n),yield o.complete,"Record deleted"}catch(e){return console.error("failed to delete record",e),"Failed to delete record"}}))}upgradeDatabase(e,t){if(e.oldVersion<t.version&&t.stores)for(let n=0;n<t.stores.length;n++){const o=t.stores[n];if(!e.objectStoreNames.contains(o.name)){let t=o.primaryKey;t||(t={name:"id",keyPath:"id",auto:!0});const n=e.createObjectStore(o.name,{keyPath:t.name,autoIncrement:t.auto});for(let e=0;e<o.indexes.length;e++){const t=o.indexes[e];n.createIndex(t.name,t.keyPath,{unique:t.unique})}}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,