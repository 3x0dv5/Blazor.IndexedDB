!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,o){var r,i=new Promise(function(i,s){t(r=e[n].apply(e,o)).then(i,s)});return i.request=r,i}function o(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,t,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return n(this[t],r,arguments)})})}function i(e,t,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return this[t][o].apply(this[t],arguments)})})}function s(e,t,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return function(e,t,o){var r=n(e,t,o);return r.then(function(e){if(e)return new a(e,r.request)})}(this[t],r,arguments)})})}function c(e){this._index=e}function a(e,t){this._cursor=e,this._request=t}function u(e){this._store=e}function d(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function f(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new d(n)}function l(e){this._db=e}o(c,"_index",["name","keyPath","multiEntry","unique"]),r(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),s(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(a,"_cursor",["direction","key","primaryKey","value"]),r(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(a.prototype[e]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,o),t(n._request).then(function(e){if(e)return new a(e,n._request)})})})}),u.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},u.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(u,"_store",["name","keyPath","indexNames","autoIncrement"]),r(u,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),s(u,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(u,"_store",IDBObjectStore,["deleteIndex"]),d.prototype.objectStore=function(){return new u(this._tx.objectStore.apply(this._tx,arguments))},o(d,"_tx",["objectStoreNames","mode"]),i(d,"_tx",IDBTransaction,["abort"]),f.prototype.createObjectStore=function(){return new u(this._db.createObjectStore.apply(this._db,arguments))},o(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new d(this._db.transaction.apply(this._db,arguments))},o(l,"_db",["name","version","objectStoreNames"]),i(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[u,c].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t=function(e){return Array.prototype.slice.call(e)}(arguments),n=t[t.length-1],o=this._store||this._index,r=o[e].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}})})}),[c,u].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,o=[];return new Promise(function(r){n.iterateCursor(e,function(e){e?(o.push(e.value),void 0===t||o.length!=t?e.continue():r(o)):r(o)})})})});var p={open:function(e,t,o){var r=n(indexedDB,"open",[e,t]),i=r.request;return i&&(i.onupgradeneeded=function(e){o&&o(new f(i.result,e.oldVersion,i.transaction))}),r.then(function(e){return new l(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=p,e.exports.default=e.exports}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(2);var r;n(0),function(e){const t="TimeGhost",n={IndexedDbManager:new o.IndexedDbManager};e.initialise=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(r||(r={})),r.initialise()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);t.IndexedDbManager=class{constructor(){this.assemblyName="Blazor.IndexedDB",this.promiseCallback="PromiseCallback",this.promiseError="PromiseError",this.runFunction=((e,t,n)=>(console.log("Start runFunction"),this[t](n).then(t=>{void 0===t&&(t="");const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseCallback,e,n)}).catch(t=>{const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseError,e,n)}),!0)),this.isOpen=!1,this.db=new Promise((e,t)=>{}),this.openDb=(e=>{var t=e;return new Promise((e,n)=>{this.db=o.default.open(t.dbName,t.version,e=>{this.upgradeDatabase(e,t)}),e("database created")})}),this.addRecord=(e=>new Promise((t,n)=>{const o=e.storename,r=e.data;this.db.then(e=>{e.transaction(o,"readwrite").objectStore(o).add(r).then(e=>{t(`Add new recorded with id ${e}`)}).catch(e=>{console.error(e),n("Failed to add new record")})})})),this.getRecords=(e=>new Promise((t,n)=>{this.db.then(t=>t.transaction(e).objectStore(e).getAll()).then(e=>{var n=JSON.stringify(e);t(n)}).catch(e=>{console.error("Issue getting all records",e),n("failed to get records")})})),this.getRecordById=(e=>new Promise((t,n)=>{const o=e.storename,r=e.data;this.db.then(e=>e.transaction(o,"readonly").objectStore(o).get(r)).then(e=>{var n=JSON.stringify(e);t(n)}).catch(e=>{console.error(`failed to get record: ${r}`,e),n(`failed to get record: ${r}`)})}))}upgradeDatabase(e,t){if(e.oldVersion<t.version&&t.stores)for(let n=0;n<t.stores.length;n++){const o=t.stores[n];if(!e.objectStoreNames.contains(o.name)){let t=o.primaryKey;t||(t={name:"id",keyPath:"id",auto:!0});const n=e.createObjectStore(o.name,{keyPath:t.name,autoIncrement:t.auto});for(let e=0;e<o.indexes.length;e++){const t=o.indexes[e];n.createIndex(t.name,t.keyPath,{unique:t.unique})}}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,