!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);var o;!function(e){const t="TimeGhost",n={IndexedDbManager:new r.IndexedDbManager};e.initialise=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(o||(o={})),o.initialise()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IndexedDbManager=class{constructor(){this.assemblyName="Blazor.IndexedDB",this.promiseCallback="PromiseCallback",this.promiseError="PromiseError",this.runFunction=((e,t,n)=>(console.log("Start runFunction"),this.createDb().then(t=>{void 0===t&&(t="");const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseCallback,e,n)}).catch(t=>{const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseError,e,n)}),!0)),this.createDb=(()=>{const e="test",t=1;return console.log("createDb"),new Promise((n,r)=>{const o=window.indexedDB.open(e,t);o.onsuccess=(r=>{this.db=o.result,n(`Database ${e} created. Version: ${t}`)}),o.onerror=(t=>{r(`Failed to create database ${e}`)}),o.onupgradeneeded=(e=>{o.result.createObjectStore("names",{autoIncrement:!0})})})}),this.testFunction=(e=>`${e}: ${this.assemblyName}`)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,