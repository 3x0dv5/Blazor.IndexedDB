!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);var o;!function(e){const t="TimeGhost",n={IndexedDbManager:new r.IndexedDbManager};e.initialise=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(o||(o={})),o.initialise()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.IndexedDbManager=class{constructor(){this.assemblyName="Blazor.IndexedDB",this.promiseCallback="PromiseCallback",this.promiseError="PromiseError",this.isOpen=!1,this.runFunction=((e,t,n)=>(console.log("Start runFunction"),this[t](n).then(t=>{void 0===t&&(t="");const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseCallback,e,n)}).catch(t=>{const n=JSON.stringify(t);DotNet.invokeMethodAsync(this.assemblyName,this.promiseError,e,n)}),!0)),this.openDb=(e=>{var t=e;return new Promise((e,n)=>{this.db=new r.default(t.name,t.version,(e,n,r)=>{if(t.tables)for(let n=0;n<t.tables.length;n++){const r=t.tables[n];if(!e.objectStoreNames.contains(r.name)){const t=r.primaryKey,n=e.createObjectStore(r.name,{keyPath:t.name,autoIncrement:t.auto});for(let e=0;e<r.indexes.length;e++){const t=r.indexes[e];n.createIndex(t.name,t.keyPath,{unique:t.unique})}}}}),e(`${t.name} is opened`)})}),this.addRecord=(e=>{const t=e.storename,n=e.data,r=this.db.transaction(t,"readwrite",(e,r)=>{const o=e.objectStore(t);return console.log(o),new Promise((e,t)=>{const r=o.add(n);r.onsuccess=(t=>e()),r.onerror=(e=>t())})});return new Promise((e,t)=>{r.then(t=>{console.log("Insertion successful"),console.log("result",t),e("record added")}).catch(e=>{t("Failed to add record")})})}),this.getObjectStore=((e,t)=>this.db.transaction(e,t).objectStore(e))}}},function(e,t,n){"use strict";n.r(t);var r=function(){function e(e,t,n){this.db_=this._request(indexedDB.open(e,t),function(e){e.onupgradeneeded=function(r){var o=e.result;n(o,r.oldVersion,r.newVersion||t)}}).catch(function(t){console.warn("PromisedDB: failed to open / upgrade database '"+e+"'",t)}),this.tctx_={request:this._request.bind(this),cursor:this._cursor.bind(this),keyCursor:this._keyCursor.bind(this),getAll:this._getAll.bind(this),getAllKeys:this._getAllKeys.bind(this)}}return e.prototype.close=function(){this.db_.then(function(e){e.close()})},e.prototype.transaction=function(e,t,n){var r=this;return this.db_.then(function(o){return new Promise(function(i,s){var c=o.transaction(e,t);c.onerror=function(){a(),s(c.error||"transaction failed")},c.onabort=function(){a(),s("aborted")};var u=null,a=function(){null!==u&&(clearTimeout(u),u=null)},l=Object.create(r.tctx_,{timeout:{value:function(e){u=setTimeout(function(){u=null,c.abort()},e)}}}),d=n(c,l);c.oncomplete=function(){a(),i(d)}})})},e.prototype._request=function(e,t){var n=new Promise(function(n,r){e.onerror=function(){r(e.error||"request failed")},e.onsuccess=function(){n(e.result)},t&&t(e)});return this.db_?this.db_.then(function(){return n}):n},e.prototype._cursorImpl=function(e){var t={next:function(e){return this.callbackFn_=e,this},complete:function(e){return this.completeFn_=e,this},catch:function(e){return this.errorFn_=e,this}};return e.onerror=function(){t.errorFn_&&t.errorFn_(e.error)},e.onsuccess=function(){var n=e.result;n?t.callbackFn_&&t.callbackFn_(n):t.completeFn_&&t.completeFn_()},t},e.prototype._cursor=function(e,t,n){var r=e.openCursor(t,n);return this._cursorImpl(r)},e.prototype._keyCursor=function(e,t,n){var r=e.openKeyCursor(t,n);return this._cursorImpl(r)},e.prototype._getAll=function(e,t,n,r){var o=this;return new Promise(function(i,s){var c=[];o._cursor(e,t,n).next(function(e){c.push(e.value),r&&c.length===r?i(c):e.continue()}).complete(function(){i(c)}).catch(function(e){s(e)})})},e.prototype._getAllKeys=function(e,t,n,r){var o=this;return new Promise(function(i,s){var c=[];o._keyCursor(e,t,n).next(function(e){c.push(e.primaryKey),r&&c.length===r?i(c):e.continue()}).complete(function(){i(c)}).catch(function(e){s(e)})})},e}();t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,